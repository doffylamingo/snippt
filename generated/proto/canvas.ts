// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "canvas.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Artist
 */
export interface Artist {
    /**
     * @generated from protobuf field: string uri = 1
     */
    uri: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: string avatar = 3
     */
    avatar: string;
}
/**
 * @generated from protobuf message EntityCanvazResponse
 */
export interface EntityCanvazResponse {
    /**
     * @generated from protobuf field: repeated EntityCanvazResponse.Canvaz canvases = 1
     */
    canvases: EntityCanvazResponse_Canvaz[];
    /**
     * @generated from protobuf field: int64 ttl_in_seconds = 2
     */
    ttlInSeconds: bigint;
}
/**
 * @generated from protobuf message EntityCanvazResponse.Canvaz
 */
export interface EntityCanvazResponse_Canvaz {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string url = 2
     */
    url: string;
    /**
     * @generated from protobuf field: string file_id = 3
     */
    fileId: string;
    /**
     * @generated from protobuf field: Type type = 4
     */
    type: Type;
    /**
     * @generated from protobuf field: string entity_uri = 5
     */
    entityUri: string;
    /**
     * @generated from protobuf field: Artist artist = 6
     */
    artist?: Artist;
    /**
     * @generated from protobuf field: bool explicit = 7
     */
    explicit: boolean;
    /**
     * @generated from protobuf field: string uploaded_by = 8
     */
    uploadedBy: string;
    /**
     * @generated from protobuf field: string etag = 9
     */
    etag: string;
    /**
     * @generated from protobuf field: string canvas_uri = 11
     */
    canvasUri: string;
}
/**
 * @generated from protobuf message EntityCanvazRequest
 */
export interface EntityCanvazRequest {
    /**
     * @generated from protobuf field: repeated EntityCanvazRequest.Entity entities = 1
     */
    entities: EntityCanvazRequest_Entity[];
}
/**
 * @generated from protobuf message EntityCanvazRequest.Entity
 */
export interface EntityCanvazRequest_Entity {
    /**
     * @generated from protobuf field: string entity_uri = 1
     */
    entityUri: string;
    /**
     * @generated from protobuf field: string etag = 2
     */
    etag: string;
}
/**
 * @generated from protobuf enum Type
 */
export enum Type {
    /**
     * @generated from protobuf enum value: IMAGE = 0;
     */
    IMAGE = 0,
    /**
     * @generated from protobuf enum value: VIDEO = 1;
     */
    VIDEO = 1,
    /**
     * @generated from protobuf enum value: VIDEO_LOOPING = 2;
     */
    VIDEO_LOOPING = 2,
    /**
     * @generated from protobuf enum value: VIDEO_LOOPING_RANDOM = 3;
     */
    VIDEO_LOOPING_RANDOM = 3,
    /**
     * @generated from protobuf enum value: GIF = 4;
     */
    GIF = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Artist$Type extends MessageType<Artist> {
    constructor() {
        super("Artist", [
            { no: 1, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Artist>): Artist {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uri = "";
        message.name = "";
        message.avatar = "";
        if (value !== undefined)
            reflectionMergePartial<Artist>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Artist): Artist {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Artist, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uri = 1; */
        if (message.uri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Artist
 */
export const Artist = new Artist$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityCanvazResponse$Type extends MessageType<EntityCanvazResponse> {
    constructor() {
        super("EntityCanvazResponse", [
            { no: 1, name: "canvases", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EntityCanvazResponse_Canvaz },
            { no: 2, name: "ttl_in_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EntityCanvazResponse>): EntityCanvazResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.canvases = [];
        message.ttlInSeconds = 0n;
        if (value !== undefined)
            reflectionMergePartial<EntityCanvazResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityCanvazResponse): EntityCanvazResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated EntityCanvazResponse.Canvaz canvases */ 1:
                    message.canvases.push(EntityCanvazResponse_Canvaz.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 ttl_in_seconds */ 2:
                    message.ttlInSeconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityCanvazResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated EntityCanvazResponse.Canvaz canvases = 1; */
        for (let i = 0; i < message.canvases.length; i++)
            EntityCanvazResponse_Canvaz.internalBinaryWrite(message.canvases[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 ttl_in_seconds = 2; */
        if (message.ttlInSeconds !== 0n)
            writer.tag(2, WireType.Varint).int64(message.ttlInSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EntityCanvazResponse
 */
export const EntityCanvazResponse = new EntityCanvazResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityCanvazResponse_Canvaz$Type extends MessageType<EntityCanvazResponse_Canvaz> {
    constructor() {
        super("EntityCanvazResponse.Canvaz", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["Type", Type] },
            { no: 5, name: "entity_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "artist", kind: "message", T: () => Artist },
            { no: 7, name: "explicit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "uploaded_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "etag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "canvas_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EntityCanvazResponse_Canvaz>): EntityCanvazResponse_Canvaz {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.url = "";
        message.fileId = "";
        message.type = 0;
        message.entityUri = "";
        message.explicit = false;
        message.uploadedBy = "";
        message.etag = "";
        message.canvasUri = "";
        if (value !== undefined)
            reflectionMergePartial<EntityCanvazResponse_Canvaz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityCanvazResponse_Canvaz): EntityCanvazResponse_Canvaz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string file_id */ 3:
                    message.fileId = reader.string();
                    break;
                case /* Type type */ 4:
                    message.type = reader.int32();
                    break;
                case /* string entity_uri */ 5:
                    message.entityUri = reader.string();
                    break;
                case /* Artist artist */ 6:
                    message.artist = Artist.internalBinaryRead(reader, reader.uint32(), options, message.artist);
                    break;
                case /* bool explicit */ 7:
                    message.explicit = reader.bool();
                    break;
                case /* string uploaded_by */ 8:
                    message.uploadedBy = reader.string();
                    break;
                case /* string etag */ 9:
                    message.etag = reader.string();
                    break;
                case /* string canvas_uri */ 11:
                    message.canvasUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityCanvazResponse_Canvaz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string file_id = 3; */
        if (message.fileId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fileId);
        /* Type type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* string entity_uri = 5; */
        if (message.entityUri !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.entityUri);
        /* Artist artist = 6; */
        if (message.artist)
            Artist.internalBinaryWrite(message.artist, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool explicit = 7; */
        if (message.explicit !== false)
            writer.tag(7, WireType.Varint).bool(message.explicit);
        /* string uploaded_by = 8; */
        if (message.uploadedBy !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.uploadedBy);
        /* string etag = 9; */
        if (message.etag !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.etag);
        /* string canvas_uri = 11; */
        if (message.canvasUri !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.canvasUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EntityCanvazResponse.Canvaz
 */
export const EntityCanvazResponse_Canvaz = new EntityCanvazResponse_Canvaz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityCanvazRequest$Type extends MessageType<EntityCanvazRequest> {
    constructor() {
        super("EntityCanvazRequest", [
            { no: 1, name: "entities", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EntityCanvazRequest_Entity }
        ]);
    }
    create(value?: PartialMessage<EntityCanvazRequest>): EntityCanvazRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entities = [];
        if (value !== undefined)
            reflectionMergePartial<EntityCanvazRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityCanvazRequest): EntityCanvazRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated EntityCanvazRequest.Entity entities */ 1:
                    message.entities.push(EntityCanvazRequest_Entity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityCanvazRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated EntityCanvazRequest.Entity entities = 1; */
        for (let i = 0; i < message.entities.length; i++)
            EntityCanvazRequest_Entity.internalBinaryWrite(message.entities[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EntityCanvazRequest
 */
export const EntityCanvazRequest = new EntityCanvazRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityCanvazRequest_Entity$Type extends MessageType<EntityCanvazRequest_Entity> {
    constructor() {
        super("EntityCanvazRequest.Entity", [
            { no: 1, name: "entity_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "etag", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EntityCanvazRequest_Entity>): EntityCanvazRequest_Entity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entityUri = "";
        message.etag = "";
        if (value !== undefined)
            reflectionMergePartial<EntityCanvazRequest_Entity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityCanvazRequest_Entity): EntityCanvazRequest_Entity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string entity_uri */ 1:
                    message.entityUri = reader.string();
                    break;
                case /* string etag */ 2:
                    message.etag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityCanvazRequest_Entity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string entity_uri = 1; */
        if (message.entityUri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.entityUri);
        /* string etag = 2; */
        if (message.etag !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.etag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EntityCanvazRequest.Entity
 */
export const EntityCanvazRequest_Entity = new EntityCanvazRequest_Entity$Type();
